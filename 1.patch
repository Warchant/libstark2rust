diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..a3ae164
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,6 @@
+*.o
+.cache
+stark-dpm
+stark-tinyram
+*.a
+compile_commands.json
diff --git a/libstark/src/common/langCommon/Sequence.hpp b/libstark/src/common/langCommon/Sequence.hpp
index e38c941..0d984f2 100644
--- a/libstark/src/common/langCommon/Sequence.hpp
+++ b/libstark/src/common/langCommon/Sequence.hpp
@@ -1,7 +1,8 @@
 #ifndef  __Sequence_HPP
 #define  __Sequence_HPP
 
-#include <stdint.h>
+#include <cstdint>
+#include <cstddef>
 
 namespace libstark {
 
@@ -20,6 +21,8 @@ public:
 	 */
 	virtual T getElementByIndex(index_t index)const = 0;
 
+	virtual size_t size() const = 0;
+
 	virtual ~Sequence(){};
 };
 
@@ -30,10 +33,10 @@ public:
 template <class T>
 class LazyVector : public Sequence<T> {
     public:
-        virtual typename Sequence<T>::index_t size()const = 0;    
+        virtual typename Sequence<T>::index_t size()const = 0;
 };
 
 
-} // namespace libstark 
+} // namespace libstark
 
 #endif   // __Sequence_HPP
diff --git a/libstark/src/protocols/common/CryptoCommitment/MerkleCommitment.hpp b/libstark/src/protocols/common/CryptoCommitment/MerkleCommitment.hpp
index 52fa0a0..5822296 100644
--- a/libstark/src/protocols/common/CryptoCommitment/MerkleCommitment.hpp
+++ b/libstark/src/protocols/common/CryptoCommitment/MerkleCommitment.hpp
@@ -6,6 +6,7 @@
 #include <cstring>
 #include <map>
 #include <set>
+#include <string>
 
 namespace libstark{
 namespace Protocols{
@@ -13,7 +14,7 @@ namespace CryptoCommitment{
 
 struct hashDigest_t{
     char buffer[128/8];
-    
+
     std::string toString()const;
 };
 
@@ -24,8 +25,8 @@ bool operator<(const hashDigest_t& a, const hashDigest_t& b);
 typedef std::vector<hashDigest_t> path_t;
 
 //hashes 64 bytes from src into 32 bytes in dst
-void hash(void const* const src, void * const dst); 
-hashDigest_t hash(void const* const src); 
+void hash(void const* const src, void * const dst);
+hashDigest_t hash(void const* const src);
 
 const short logBytesPerHash = 4;
 
@@ -69,13 +70,13 @@ public:
     void addEntry(const size_t idx, const hashDigest_t& data);
     void deleteEntry(const size_t idx);
     const hashDigest_t& readData(const size_t idx)const;
-    
+
     //idx is the index of a pair of hashes
     hashDigest_t hashPair(const size_t idx)const;
-    
+
     //calculates the next layer, with merging received data, for verification
     SparceMerkleLayer calculateNextLayer(const SparceMerkleLayer& recieved)const;
-    
+
     std::vector<hashDigest_t> toVector()const;
     std::set<size_t> getIndices()const;
 private:
@@ -87,7 +88,7 @@ public:
     //construct empty sparse tree
     // It is expected src_logLen is in bytes.
     SparceMerkleTree(const short src_logLen);
-    
+
     //De serialization
     void DeSerialize(const std::set<size_t>& queriedIndices, const std::vector<hashDigest_t>& serializedSubtree);
 
@@ -96,10 +97,10 @@ public:
 
     bool hasData(const size_t idx)const;
     const hashDigest_t& readData(const size_t idx)const;
-    
+
     //Serialization
     std::vector<hashDigest_t> toVector()const;
-    
+
     //used to get expected results length
     std::vector< std::pair<short,size_t> > getSerializationMapping(const std::set<size_t>& queriedIndices)const;
 private:
diff --git a/libstark/src/reductions/BairToAcsp/Details/witnessReduction.cpp b/libstark/src/reductions/BairToAcsp/Details/witnessReduction.cpp
index da0c108..36d501f 100644
--- a/libstark/src/reductions/BairToAcsp/Details/witnessReduction.cpp
+++ b/libstark/src/reductions/BairToAcsp/Details/witnessReduction.cpp
@@ -2,6 +2,7 @@
 #include "../Routing/LongSymmetricDeBruijnNetwork.hpp"
 #include "common/Utils/TaskReporting.hpp"
 
+#include <stdexcept>
 #include <vector>
 
 namespace libstark{
@@ -17,20 +18,20 @@ using Algebra::one;
 typedef LongSymmetricDeBruijnNetwork permNetwork_t;
 
 unique_ptr<AcspWitness> witnessReduction::reduceWitness( const BairInstance& instance, const BairWitness& witness){
-    
+
     TASK("Reducing Bair witness to Acsp");
-    
+
     //get common information
     common commonDef(instance, vector<FieldElement>(instance.constraintsPermutation().numMappings(),one()), vector<FieldElement>(instance.constraintsAssignment().numMappings(),one()));
     witnessMappings witnessMapping(commonDef);
 
     //get the embedding
     vector<evaluation_t> mappings = getEmbeddingMapping(instance, witness, commonDef,witnessMapping);
-    
+
     //ordered basis for witness space
     const auto& basis = witnessMapping.getImageSpaceOrderedBasis();
 //#define ZERO_WITNESS  //sometimes for debugging it's convenient to use an identically zero witness
-#ifdef ZERO_WITNESS 
+#ifdef ZERO_WITNESS
 	for (auto& p : mapping)
 		p = zero();
 #endif
@@ -50,20 +51,24 @@ public:
 
 	size_t getElementByIndex(index_t index)const{
         const size_t singeltonIndex = instance_.domainSize();
-           
-        //singleton case 
+
+        //singleton case
         if(index == singeltonIndex) return 0;
 
         //general case
         return expModulu(index);
     }
 
+    size_t size() const override {
+        throw std::runtime_error("unknown size");
+    }
+
 private:
     const BairInstance& instance_;
     const common commonDef_;
 
     size_t expModulu(const size_t exp)const{
-        
+
         const int64_t modulus = commonDef_.rowsModulus();
         const size_t modulus_deg = floor(Infrastructure::Log2(modulus));
         const size_t overflow_mask = 1UL<<modulus_deg;
@@ -94,6 +99,10 @@ class inversePermutation : public Sequence<size_t>{
                 _COMMON_FATAL("Access to such index is unexpected");
             }
         }
+
+        size_t size() const override {
+            return seq_.size();
+        }
     private:
         vector<size_t> seq_;
 };
@@ -103,14 +112,18 @@ class conjugatePermutation : public Sequence<size_t>{
     public:
         conjugatePermutation(const Sequence<size_t>& g, const Sequence<size_t>& h, const size_t numElements):
             g_(g), h_(h), g_inv_(g,numElements){};
-        
+
 		size_t getElementByIndex(index_t index)const{
             const size_t v1 = g_inv_.getElementByIndex(index);
             const size_t v2 = h_.getElementByIndex(v1);
             const size_t v3 = g_.getElementByIndex(v2);
 
             return v3;
-        } 
+        }
+
+        size_t size() const override {
+            throw std::runtime_error("unknown size");
+        }
 
     private:
         const Sequence<size_t>& g_;
@@ -125,7 +138,11 @@ class addSingeltonToPermutation : public Sequence<size_t>{
             if (index == singletoneIndex_) return singletoneIndex_;
             return origPerm_.getElementByIndex(index);
         }
-    
+
+        size_t size() const override {
+            return origPerm_.size();
+        }
+
     private:
         const Sequence<size_t>& origPerm_;
         const size_t singletoneIndex_;
@@ -149,7 +166,7 @@ vector<witnessReduction::evaluation_t> witnessReduction::getEmbeddingMapping( co
 
     //fill with random values for ZK
     fillWithRandomVals(mappings);
-    
+
     //Map the coloring (assignment)
     mapChi(instance,witness,mappings,commonDef,witnessMapping);
 
@@ -157,14 +174,14 @@ vector<witnessReduction::evaluation_t> witnessReduction::getEmbeddingMapping( co
     if(commonDef.hasRoutingNetwork()){
         mapNetwork(instance,witness,mappings,commonDef,witnessMapping);
     }
-    
+
     //return the mapping
     return mappings;
 }
 
 void witnessReduction::mapChi(const BairInstance& instance, const BairWitness& witness, vector<evaluation_t>& mappings, const common& commonDef, const witnessMappings& witnessMapping){
     const size_t cyclicDomainSize = instance.domainSize();
-    
+
     const vector<size_t> unroutedVars = commonDef.variablesNonPerm();
 
     //ordered basis for witness space
@@ -188,7 +205,7 @@ void witnessReduction::mapChi(const BairInstance& instance, const BairWitness& w
 }
 
 void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitness& witness, vector<evaluation_t>& mappings, const common& commonDef, const witnessMappings& witnessMapping){
-    
+
     /// We want the "log" permutation, the one that maps:
     /// \f$ g^i \mapsto i \f$, and for the special case: \f$ 0 \mapsto singletoneIndex \f$
     /// The log permutation defines the mapping from the label in the first column
@@ -199,7 +216,7 @@ void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitnes
 
     //Add another element to permutation as a singleton, so we can rout it using DeBruijn
     const addSingeltonToPermutation expendedPerm(witness.permutation(),instance.domainSize());
-    
+
     /// Because we mess with the indexes, we have to change the permutation as well
     /// If the good permutation was \f$ i \mapsto \pi(i) \f$
     /// after changing the numbering, using some permutation \f$ \sigma \f$
@@ -207,25 +224,25 @@ void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitnes
     /// would get the permutation \f$ \sigma(i) \mapsto \sigma \circ \pi(i) \f$
     /// But what we want is \f$ \sigma(i) \mapsto \pi \circ \sigma(i) \f$,
     /// So instead we rout the conjugate permutation \f$ \sigma^{-1} \circ \pi \circ \sigma \f$
-    /// This way we get: 
+    /// This way we get:
     /// \f$ \sigma(i) \mapsto \sigma \circ \sigma^{-1} \circ \pi \circ \sigma(i) = \pi \circ \sigma(i) \f$
     const conjugatePermutation permToRout(expPerm,expendedPerm, instance.domainSize()+1);
 
     //map routing network
     permNetwork_t net(instance.domainSizeIndicator());
     net.rout(permToRout);
-   
+
     const vector<size_t> routedIndexes = commonDef.variablesPerm();
 
     //define the index for the additional vector
     const size_t addedVecId = instance.domainSize();
-    
+
     //ordered basis for witness space
     const auto& basis = witnessMapping.getImageSpaceOrderedBasis();
 
     //map the main routing network
     {
-    
+
     for (size_t rowId=0; rowId < net.height(); rowId++){
         for(size_t columnId = 0; columnId < net.getWingWidth() ; columnId++){
             for(short netPartId = 0; netPartId < 2; netPartId++){//loop over the two halves
@@ -233,7 +250,7 @@ void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitnes
                 const RoutingNetwork::dataID_t dataId = net.getDataID(netPartId, columnId, rowId);
                 const size_t vecId = logPerm.getElementByIndex(dataId);
                 const auto& coloring =  (vecId == addedVecId? instance.paddingPi() : witness.get_color(vecId));
-                
+
                 //map routing network
                 for (size_t packetId = 0; packetId < routedIndexes.size(); packetId++){
                     const auto currPacketIndex = routedIndexes[packetId];
@@ -246,7 +263,7 @@ void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitnes
                 if( columnId < net.getWingWidth()-1){
                     const short bitVal = net.routingBit(netPartId,columnId,rowId);
                     const auto indicator_index = witnessMapping.mapNetworkRoutingBit_witnessIndex(rowId,columnId,netPartId);
-                    
+
                     switch(bitVal){
                         case 0: mappings[indicator_index.first][indicator_index.second] = zero(); break;
                         case 1: mappings[indicator_index.first][indicator_index.second] = one(); break;
@@ -256,9 +273,9 @@ void witnessReduction::mapNetwork(const BairInstance& instance, const BairWitnes
             }
         }
     }
-    
+
     }
 }
-    
+
 } //namespace BairToAcsp
 } //namespace libstark
diff --git a/libstark/src/reductions/BairToAcsp/Routing/BtrflyBasedPermutation.cpp b/libstark/src/reductions/BairToAcsp/Routing/BtrflyBasedPermutation.cpp
index d5c354b..46eecae 100644
--- a/libstark/src/reductions/BairToAcsp/Routing/BtrflyBasedPermutation.cpp
+++ b/libstark/src/reductions/BairToAcsp/Routing/BtrflyBasedPermutation.cpp
@@ -17,7 +17,7 @@ namespace{
  * @class bitReverse
  * @brief permutes a given sequence by bit reversing its values
  *
- * We define \f$ rev : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as 
+ * We define \f$ rev : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as
  * the bit reversal operator.
  * Let \f$ A \f$ be a given sequence (named "src" in the constructor),
  * this class defines a new sequence \f$ B \f$ such that
@@ -35,11 +35,15 @@ class bitReverse : public Sequence<size_t>{
 public:
 	bitReverse(const Sequence<size_t>& src, const layerID_t& numBits)
 	:src_(src),numBits_(numBits){};
-	
+
 	size_t getElementByIndex(index_t index)const {
 	    const auto origVal = src_.getElementByIndex(index);
         return reverseBits(origVal)>>(8*sizeof(origVal)-numBits_);
     }
+
+	size_t size() const override {
+		return src_.size();
+	}
 private:
     const Sequence<size_t>& src_;
     const size_t numBits_;
@@ -51,7 +55,7 @@ dataID_t BtrflyBasedPermutation::getDataID(const layerID_t& l, const labelID_t&
 	const layerID_t first_benesFirstHalf = 0;
 	const layerID_t first_bitReverse = k_;
 	const layerID_t first_benesSecondHalf = 3*k_;
-	
+
 	layerID_t curr_l = l;
 	labelID_t curr_w = w;
 
diff --git a/libstark/src/reductions/BairToAcsp/Routing/DeBruijnPermutationNet.cpp b/libstark/src/reductions/BairToAcsp/Routing/DeBruijnPermutationNet.cpp
index 626752e..65df8c9 100644
--- a/libstark/src/reductions/BairToAcsp/Routing/DeBruijnPermutationNet.cpp
+++ b/libstark/src/reductions/BairToAcsp/Routing/DeBruijnPermutationNet.cpp
@@ -16,9 +16,9 @@ namespace{
  * @brief permutes a given sequence for a specific fix needed for DeBruijn network
  * this is made to have the first column always ordered in increasing order 0,1,2,...
  *
- * We define \f$ sr : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as 
+ * We define \f$ sr : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as
  * the cyclic shift right operator.
- * And we define \f$ sl : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as 
+ * And we define \f$ sl : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as
  * the cyclic shift left operator.
  * Let \f$ A \f$ be a given sequence (named "src" in the constructor),
  * this class defines a new sequence \f$ B \f$ such that
@@ -36,7 +36,7 @@ class shiftRight : public Sequence<size_t>{
 public:
 	shiftRight(const Sequence<size_t>& src, const layerID_t& numBits)
 	:src_(src),numBits_(numBits){};
-	
+
 	size_t getElementByIndex(index_t index)const {
         const labelID_t mask = (1<<numBits_)-1; // the mask is least segnificant $k$ bits set
 	    const auto shifted_index = ((index<<1) | (index>>(numBits_-1))) & mask;
@@ -45,6 +45,10 @@ public:
 
         return shifted_data;
     }
+
+    size_t size() const override {
+        return src_.size();
+    }
 private:
     const Sequence<size_t>& src_;
     const size_t numBits_;
@@ -55,7 +59,7 @@ private:
 dataID_t DeBruijnPermutationNet::getDataID(const layerID_t& l, const labelID_t& w) const{
 	const size_t shift_size = (l+k_-1)%k_;
 	const labelID_t mask = (1<<k_)-1; // the mask is least segnificant $k$ bits set
-	
+
 	//cyclic shift left of least segnificant $k$ bits, $shift_size$ steps
 	const labelID_t btrfly_w = ((w<<shift_size) | (w>>(k_-shift_size))) & mask;
 
@@ -67,17 +71,17 @@ dataID_t DeBruijnPermutationNet::getDataID(const layerID_t& l, const labelID_t&
 
 	return shifted_data;
 }
-	
+
 void DeBruijnPermutationNet::rout(const permutation_t& permutation){
 	btrfly_.rout(shiftRight(permutation,k_));
 }
 
 short DeBruijnPermutationNet::routingBit(const layerID_t& l, const labelID_t& w) const{
-    
+
     const labelID_t mask = (1<<k_)-1;
     const auto neighbor1_label = ((w>>1) | (w<<(k_-1))) & mask;
     const auto neighbor2_label = neighbor1_label ^ 1;
-			
+
     return getDataID(l,w) == getDataID(l+1,neighbor2_label);
 }
 
diff --git a/libstark/src/reductions/BairToAcsp/Routing/LongDeBruijnPermutationNet.cpp b/libstark/src/reductions/BairToAcsp/Routing/LongDeBruijnPermutationNet.cpp
index e0f7604..62753f8 100644
--- a/libstark/src/reductions/BairToAcsp/Routing/LongDeBruijnPermutationNet.cpp
+++ b/libstark/src/reductions/BairToAcsp/Routing/LongDeBruijnPermutationNet.cpp
@@ -37,13 +37,17 @@ class rightShiftedIndexes : public Sequence<size_t>{
 public:
 	rightShiftedIndexes(const Sequence<size_t>& src, const layerID_t& numBits, const layerID_t& numShifts)
 	:origSequence_(src), numBits_(numBits), numShifts_(numShifts % numBits){;}
-	
+
 	size_t getElementByIndex(index_t index)const {
         const index_t mask = (1<<numBits_)-1;
         const auto shifted_index = ((index>>numShifts_) | (index<<(numBits_ - numShifts_))) & mask;
         const auto data = origSequence_.getElementByIndex(shifted_index);
         return data;
 	}
+
+    size_t size() const override {
+        return origSequence_.size();
+    }
 private:
 	const Sequence<size_t>& origSequence_;
     const layerID_t numBits_;
@@ -66,7 +70,7 @@ void LongDeBruijnPermutationNet::rout(const permutation_t& permutation){
 dataID_t LongDeBruijnPermutationNet::getDataID(const layerID_t& l, const labelID_t& w) const{
     //If the vertex is not in the extension, access directly the DeBruijn network
     if (l < DB_net_.width()) return DB_net_.getDataID(l,w);
-  
+
     //Otherwise, calculate the relevant DeBrujin vertex, by doing cyclic shifts left,
     //as many as the amount of layers we need to go back
     const auto mask = (1<<k_)-1;
@@ -79,7 +83,7 @@ dataID_t LongDeBruijnPermutationNet::getDataID(const layerID_t& l, const labelID
 short LongDeBruijnPermutationNet::routingBit(const layerID_t& l, const labelID_t& w) const{
     //If the vertex is not in the extension, access directly the DeBruijn network
     if (l < DB_net_.width()-1) return DB_net_.routingBit(l,w);
-    
+
     //Otherwise, return a constant 0
     //because the extension has constant routing
     return 0;
diff --git a/libstark/src/reductions/BairToAcsp/Routing/SymmetricDeBruijnNetwork.cpp b/libstark/src/reductions/BairToAcsp/Routing/SymmetricDeBruijnNetwork.cpp
index 49d4fc0..ed2e102 100644
--- a/libstark/src/reductions/BairToAcsp/Routing/SymmetricDeBruijnNetwork.cpp
+++ b/libstark/src/reductions/BairToAcsp/Routing/SymmetricDeBruijnNetwork.cpp
@@ -2,7 +2,7 @@
 
 namespace libstark{
 namespace BairToAcsp{
-    
+
 typedef RoutingNetwork::layerID_t layerID_t;
 typedef RoutingNetwork::labelID_t labelID_t;
 typedef RoutingNetwork::dataID_t dataID_t;
@@ -14,9 +14,9 @@ namespace{
  * @brief permutes a given sequence for a specific fix needed for DeBruijn network
  * this is made to have the first column always ordered in increasing order 0,1,2,...
  *
- * We define \f$ sr : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as 
+ * We define \f$ sr : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as
  * the cyclic shift right operator.
- * And we define \f$ sl : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as 
+ * And we define \f$ sl : {0,1}^{numBits} \to {0,1}^{numBits} \f$ as
  * the cyclic shift left operator.
  * Let \f$ A \f$ be a given sequence (named "src" in the constructor),
  * this class defines a new sequence \f$ B \f$ such that
@@ -34,7 +34,7 @@ class shiftRight : public Sequence<size_t>{
 public:
 	shiftRight(const Sequence<size_t>& src, const layerID_t& numBits)
 	:src_(src),numBits_(numBits){};
-	
+
 	size_t getElementByIndex(index_t index)const {
         const labelID_t mask = (1<<numBits_)-1; // the mask is least significant $k$ bits set
 	    const auto shifted_index = ((index<<1) | (index>>(numBits_-1))) & mask;
@@ -43,24 +43,28 @@ public:
 
         return shifted_data;
     }
+
+    size_t size() const override {
+        return src_.size();
+    }
 private:
     const Sequence<size_t>& src_;
     const size_t numBits_;
 };
 
 }
-	
+
 void SymmetricDeBruijnNetwork::rout(const permutation_t& permutation){
 	benes_.rout(shiftRight(permutation,k_));
 }
 
 short SymmetricDeBruijnNetwork::routingBit(const layerID_t& l, const labelID_t& w) const{
-    
+
     const labelID_t mask = (1<<k_)-1;
-    
+
     labelID_t neighbor1_label;
     labelID_t neighbor2_label;
-	
+
     if( l < k_){
         //first half - reverse DeBruijn
         neighbor1_label = ((w<<1) | (w>>(k_-1))) & mask;
@@ -72,12 +76,12 @@ short SymmetricDeBruijnNetwork::routingBit(const layerID_t& l, const labelID_t&
         neighbor1_label = ((w>>1) | (w<<(k_-1))) & mask;
         neighbor2_label = neighbor1_label ^ 1;
     }
-    		
+
     return getDataID(l,w) == getDataID(l+1,neighbor2_label);
 }
 
 dataID_t SymmetricDeBruijnNetwork::getDataID(const layerID_t& l, const labelID_t& w)const {
-    
+
     //Find the original w, to get data from the Benes network
     labelID_t orig_w;
     if ( l < k_ ) orig_w = btrflyToDebruijn(k_-l,w);
@@ -92,11 +96,11 @@ dataID_t SymmetricDeBruijnNetwork::getDataID(const layerID_t& l, const labelID_t
 
 	return shifted_data;
 }
-    
+
 labelID_t SymmetricDeBruijnNetwork::btrflyToDebruijn(const layerID_t& l, const labelID_t& w)const{
 	const size_t shift_size = (l+k_-1)%k_;
 	const labelID_t mask = (1<<k_)-1; // the mask is least segnificant $k$ bits set
-	
+
 	//cyclic shift left of least segnificant $k$ bits, $shift_size$ steps
 	const labelID_t btrfly_w = ((w<<shift_size) | (w>>(k_-shift_size))) & mask;
     return btrfly_w;
diff --git a/starkdpm/AES160hashcLOCI_witness.cpp b/starkdpm/AES160hashcLOCI_witness.cpp
index 1ffe8c3..d3b64bc 100644
--- a/starkdpm/AES160hashcLOCI_witness.cpp
+++ b/starkdpm/AES160hashcLOCI_witness.cpp
@@ -1,5 +1,6 @@
 #include "AES160hashcLOCI_instance.hpp"
 #include "common/Utils/ErrorHandling.hpp"
+#include <stdexcept>
 
 namespace stark_dpm{
 namespace ACSP_FOR_AES160hashcLOCI{
@@ -14,6 +15,10 @@ namespace{
             size_t getElementByIndex(index_t index)const{
                 return index;
             }
+
+            size_t size() const {
+                throw std::runtime_error("Unknown size");
+            }
     };
 
     class coloringClass : public libstark::BairWitness::assignment_t{
@@ -26,18 +31,22 @@ namespace{
 				AES160hashcLOCI::genWitnessLOCIHashcAES160WithPadding(coloring_, hashC,	commonParams.length, fprint);
 					//std::cout << "done " << coloring_[0][AES160hashchain::reg::STATE] << std::endl;
             }
-            
+
             libstark::BairWitness::color_t getElementByIndex(index_t index)const{
                 _COMMON_ASSERT(index < coloring_.size(),"index of color out of range");
                 return coloring_[index];
             }
+
+            size_t size() const override {
+                return coloring_.size();
+            }
     };
 }
 
 libstark::BairWitness buildBairWitness(const AES160hashcLOCICommonParams& commonParams, const witnessType hashC, const AES160hashcLOCI::fingerprint_t& fprint){
     using libstark::BairWitness;
     BairWitness::permutation_ptr perm(new idPermutation());
-    BairWitness::assignment_ptr assignment(new coloringClass(commonParams, hashC, fprint)); 
+    BairWitness::assignment_ptr assignment(new coloringClass(commonParams, hashC, fprint));
 
     return BairWitness(std::move(assignment), std::move(perm));
 }
diff --git a/tinyram/stark-tinyram/src/TinyRAMtoBair/ConstraintSystemToBair/cs2Bair.hpp b/tinyram/stark-tinyram/src/TinyRAMtoBair/ConstraintSystemToBair/cs2Bair.hpp
index 43adce5..fd3e668 100644
--- a/tinyram/stark-tinyram/src/TinyRAMtoBair/ConstraintSystemToBair/cs2Bair.hpp
+++ b/tinyram/stark-tinyram/src/TinyRAMtoBair/ConstraintSystemToBair/cs2Bair.hpp
@@ -7,6 +7,7 @@
 #include <languages/Bair/ConstraintsSys.hpp>
 #include <languages/Bair/BairWitness.hpp>
 #include <languages/Bair/BairInstance.hpp>
+#include <stdexcept>
 
 
 
@@ -38,7 +39,7 @@ private:
 	MemoryFollowingTraceVariables memoryFollowingTraceVariables_;
 	// Translation vector between CS variables to Bair
 	std::vector<Algebra::Variable> translation_;
-    
+
 	std::vector<std::vector<Algebra::FieldElement>> traceAssignmentTable_;
     std::map<size_t,size_t> memoryPermutation_;
 
@@ -73,7 +74,7 @@ public:
 	std::vector<Variable> getTranslationVector() const { return pb_->getTranslationVector(); }
 	const std::map<size_t, size_t>& getMemoryPermutation()const { return memoryPermutation_; }
 	size_t varsAmount() const; // Number of Variables in one traceLine
-    libstark::BairInstance::boundaryConstraints_t getBoundaryConstraints() const; 
+    libstark::BairInstance::boundaryConstraints_t getBoundaryConstraints() const;
 }; // cs2Bair
 
 
@@ -112,6 +113,10 @@ private:
 public:
 	cs2BairColoring(const cs2Bair& cs2bair);
     libstark::BairWitness::color_t getElementByIndex(index_t index) const;
+
+	size_t size() const override {
+		throw std::runtime_error("Unknown size");
+	}
 };
 
 /*************************************************************************************************/
@@ -130,6 +135,10 @@ public:
 	cs2BairMemory(const cs2Bair& cs2bair);
 	size_t getElementByIndex(index_t index) const;
 
+	size_t size() const override {
+		return memoryPermutation_.size();
+	}
+
 };
 
 /*************************************************************************************************/
@@ -145,7 +154,7 @@ class cs2BairMemoryCS : public libstark::ConstraintSys {
 private:
 	polySet_t constraints_;
 	const size_t numVars_;
-	
+
 public:
 	cs2BairMemoryCS(const cs2Bair& cs2bair);
 	cs2BairMemoryCS(const polySet_t& constraints, const size_t numVars);
